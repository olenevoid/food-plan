# –ö–æ–º–∞–Ω–¥—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –∫–Ω–æ–ø–∫–∏

from telegram import Update
from telegram.ext import ContextTypes
from .keyboards import get_main_menu_keyboard, get_recipe_keyboard
import bot.strings as strings
import demodata.demo_db as db
import random
import os


async def send_recipe_message(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    keyboard,
    image_path=None,
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏."""
    if update.callback_query:
        chat_id = update.callback_query.message.chat_id
    else:
        chat_id = update.message.chat_id

    message_ids = []

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª—å—à–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) > 1024:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ/–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        parts = text.split("\n\nüìù <b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</b>\n\n")
        if len(parts) == 2:
            short_text = (
                parts[0]
                + "\n\nüìù <b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...</b>"
            )
            instruction_text = "üìù <b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</b>\n\n" + parts[1]
        else:
            short_text = text[:1000] + "..."
            instruction_text = text[1000:]

        if image_path and os.path.exists(image_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            with open(image_path, "rb") as photo:
                message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=short_text,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )
                message_ids.append(message.message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            instruction_message = await context.bot.send_message(
                chat_id=chat_id, text=instruction_text, parse_mode="HTML"
            )
            message_ids.append(instruction_message.message_id)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            message1 = await context.bot.send_message(
                chat_id=chat_id,
                text=short_text,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
            message_ids.append(message1.message_id)

            message2 = await context.bot.send_message(
                chat_id=chat_id, text=instruction_text, parse_mode="HTML"
            )
            message_ids.append(message2.message_id)
    else:
        # –¢–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        if image_path and os.path.exists(image_path):
            with open(image_path, "rb") as photo:
                message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )
                message_ids.append(message.message_id)
        else:
            message = await context.bot.send_message(
                chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode="HTML"
            )
            message_ids.append(message.message_id)

    return message_ids


# –§—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø–æ—Ç–æ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã. –ü–æ–∫–∞ –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫
async def show_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["recipe_switches"] = 3
    recipes = db.get_recipies()
    recipe = random.choice(recipes)

    image_path = (
        db.get_image_path(recipe["image_filename"])
        if recipe.get("image_filename")
        else None
    )

    message_ids = await send_recipe_message(
        update=update,
        context=context,
        text=strings.show_recipe(recipe),
        keyboard=get_recipe_keyboard(3),
        image_path=image_path,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data["current_recipe_message_ids"] = message_ids


async def show_option2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await send_recipe_message(
        update=update,
        context=context,
        text=strings.OPTION2,
        keyboard=get_main_menu_keyboard(),
        image_path=None,
    )


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        strings.HELP_MESSAGE, reply_markup=get_main_menu_keyboard(), parse_mode="HTML"
    )


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_recipe_message(
        update=update,
        context=context,
        text=strings.WELCOME_MESSAGE,
        keyboard=get_main_menu_keyboard(),
        image_path=None,
    )


async def another_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    if "current_recipe_message_ids" in context.user_data:
        chat_id = query.message.chat_id
        for message_id in context.user_data["current_recipe_message_ids"]:
            try:
                await context.bot.delete_message(chat_id, message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

    if "recipe_switches" not in context.user_data:
        context.user_data["recipe_switches"] = 3

    remaining_switches = context.user_data["recipe_switches"] - 1
    context.user_data["recipe_switches"] = remaining_switches

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
    recipes = db.get_recipies()
    recipe = random.choice(recipes)

    image_path = (
        db.get_image_path(recipe["image_filename"])
        if recipe.get("image_filename")
        else None
    )

    message_ids = await send_recipe_message(
        update=update,
        context=context,
        text=strings.show_recipe(recipe),
        keyboard=get_recipe_keyboard(remaining_switches),
        image_path=image_path,
    )

    context.user_data["current_recipe_message_ids"] = message_ids
