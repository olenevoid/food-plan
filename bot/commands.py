# –ö–æ–º–∞–Ω–¥—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –∫–Ω–æ–ø–∫–∏

from telegram import Update
from telegram.ext import ContextTypes
from .keyboards import get_main_menu_keyboard, get_recipe_keyboard
import bot.strings as strings
import demodata.demo_db as demo_db
import random
import os
from asgiref.sync import sync_to_async
from food_plan_app import db_requests as db
from datetime import datetime, timedelta


async def send_recipe_message(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    keyboard,
    image_path=None,
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏."""
    if update.callback_query:
        chat_id = update.callback_query.message.chat_id
    else:
        chat_id = update.message.chat_id

    message_ids = []

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª—å—à–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) > 1024:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ/–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        parts = text.split("\n\nüìù <b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</b>\n\n")
        if len(parts) == 2:
            short_text = parts[0]
            instruction_text = "üìù <b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</b>\n\n" + parts[1]
        else:
            short_text = text[:1000] + "..."
            instruction_text = text[1000:]

        if image_path and os.path.exists(image_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –ë–ï–ó –ö–ù–û–ü–û–ö
            with open(image_path, "rb") as photo:
                message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=short_text,
                    parse_mode="HTML",
                )
                message_ids.append(message.message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –° –ö–ù–û–ü–ö–ê–ú–ò
            instruction_message = await context.bot.send_message(
                chat_id=chat_id,
                text=instruction_text,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
            message_ids.append(instruction_message.message_id)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ü–µ—Ä–≤–æ–µ - –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            message1 = await context.bot.send_message(
                chat_id=chat_id,
                text=short_text,
                parse_mode="HTML",
            )
            message_ids.append(message1.message_id)

            # –í—Ç–æ—Ä–æ–µ - —Å –∫–Ω–æ–ø–∫–∞–º–∏
            message2 = await context.bot.send_message(
                chat_id=chat_id,
                text=instruction_text,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
            message_ids.append(message2.message_id)
    else:
        # –¢–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ –° –ö–ù–û–ü–ö–ê–ú–ò
        if image_path and os.path.exists(image_path):
            with open(image_path, "rb") as photo:
                message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )
                message_ids.append(message.message_id)
        else:
            message = await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
            message_ids.append(message.message_id)

    return message_ids


async def clear_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—á–∏—â–∞—Ç—å
    blacklist_count = context.user_data.get("blacklist_count", 0)

    if blacklist_count == 0:
        await query.answer("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—É—Å—Ç!", show_alert=True)
        return

    

    # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º
    context.user_data["blacklist_count"] = 0

    await query.edit_message_text(
        text=strings.get_welcome_message(context.user_data, cleared=True),
        reply_markup=get_main_menu_keyboard(context.user_data),
        parse_mode="HTML",
    )


async def show_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id #'55555555555' #update.effective_chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await sync_to_async(db.find_serialized_user_by_tg_id)(chat_id)
    user_id = user_info.get("id")
    first_name = user_info.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    print(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name} (ID: {user_id})")

    refresh_limit = user_info.get("refresh_limit", 3)
    refresh_count = user_info.get("refresh_count", 0)
    remaining_refreshes = refresh_limit - refresh_count

    recipe = await sync_to_async(db.find_daily_recipe_by_tg_id)(chat_id)
    updated_at: datetime = recipe.get('updated_at')

    if not recipe:
        await sync_to_async(db.set_new_daily_recipe)(chat_id)
    if datetime.now().date() >= updated_at.date() + timedelta(days=1):
        await sync_to_async(db.update_history)(chat_id)
        await sync_to_async(db.set_new_daily_recipe)(chat_id)

    image_path = recipe.get('image_path')

    # –°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    is_favorite = recipe.get("is_favorite", False)

    message_ids = await send_recipe_message(
        update=update,
        context=context,
        text=strings.show_recipe(recipe),
        keyboard=get_recipe_keyboard(remaining_refreshes, is_favorite),
        image_path=image_path,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data["current_recipe_message_ids"] = message_ids


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_recipe_message(
        update=update,
        context=context,
        text=strings.get_welcome_message(context.user_data),
        keyboard=get_main_menu_keyboard(context.user_data),
        image_path=None,
    )


async def another_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id

    await sync_to_async(db.update_refresh_counter)(chat_id)
    await sync_to_async(db.update_history)(chat_id)
    await sync_to_async(db.set_new_daily_recipe)(chat_id)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    if "current_recipe_message_ids" in context.user_data:
        chat_id = query.message.chat_id
        for message_id in context.user_data["current_recipe_message_ids"]:
            try:
                await context.bot.delete_message(chat_id, message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

    await show_recipe(update, context)
